#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# manage-local-mk - manage Buildroot local.mk
#
# Copyright (C) 2015 Eric Le Bihan <eric.le.bihan.dev@free.fr>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import os
import argparse
from subprocess import check_call
from gettext import gettext as _

__version__ = "0.1.1"


class LocalMkManager:
    def __init__(self):
        self._registry = os.path.expanduser('~/.config/buildroot.org/Makefiles')

    @property
    def presets(self):
        presets = []
        try:
            for entry in os.listdir(self._registry):
                if not os.path.isdir(entry):
                    root, ext = os.path.splitext(entry)
                    if ext == '.mk':
                        presets.append(root)
        except OSError:
            pass
        return presets

    def _create(self, preset):
        os.makedirs(self._registry, exist_ok=True)
        with open(self._expand(preset), 'w') as f:
            f.write('# Buildroot local.mk\n')

    def _expand(self, preset):
        return os.path.join(self._registry, preset + '.mk')

    def install(self, preset, destination):
        if preset in self.presets:
            if not os.path.isdir(destination):
                os.makedirs(destination)
            target = os.path.join(destination, 'local.mk')
            os.symlink(self._expand(preset), target)
        else:
            raise RuntimeError(_('no such preset'))

    def edit(self, preset):
        if preset not in self.presets:
            self._create(preset)
        check_call([os.environ.get('EDITOR', 'vi'), self._expand(preset)])


def parse_cmd_list(args):
    mgr = LocalMkManager()
    for preset in mgr.presets:
        print(preset)


def parse_cmd_edit(args):
    mgr = LocalMkManager()
    mgr.edit(args.preset)


def parse_cmd_install(args):
    mgr = LocalMkManager()
    mgr.install(args.preset, args.destination)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--version',
                        action='version',
                        version=__version__)

    subparsers = parser.add_subparsers(dest='command')
    p = subparsers.add_parser('list',
                              help=('list available presets'))
    p.set_defaults(func=parse_cmd_list)

    p = subparsers.add_parser('edit',
                              help=_('edit a local.mk preset'))
    p.add_argument('preset',
                   help=_('name of the local.mk preset'))
    p.set_defaults(func=parse_cmd_edit)

    p = subparsers.add_parser('install',
                              help=_('install a local.mk preset'))
    p.add_argument('preset',
                   help=_('name of the local.mk preset'))
    p.add_argument('destination',
                   help=_('destination directory'))
    p.set_defaults(func=parse_cmd_install)

    args = parser.parse_args()

    args = parser.parse_args()
    if not hasattr(args, 'func'):
        parser.error(_('Missing command'))
    else:
        args.func(args)

# vim: ts=4 sw=4 sts=4 et ai
